tekst:
    "Załóżmy, że Jan chce wysłać przez Internet wiadomość W do Anny. Z różnych powodów musi podzielić
    ją na n pakietów. Każdemu pakietowi nadaje kolejne numery i wysyła przez sieć. Komputer Anny po otrzymaniu przesłanych 
    pakietów musi poskładać je w całą wiadomość, ponieważ mogą one przychodzić w losowej
    kolejności. Państwa zadaniem jest zaprojektowanie i zaimplementowanie odpowiedniego rozwiązania radzącego sobie z tym problemem. 
    Należy wybrać i zaimplementować zgodnie z danym dla wybranej struktury ADT oraz
    przeanalizować czas działania - złożoność obliczeniową proponowanego rozwiązania."

Kroki działania i projektu programu:
    1.1. Zaprojektuj klasę "Osoba" posiadającą metodę dzięki której po jej wywołaniu zostanie wysłana dana wiadomość do danej instancji tej samej klasy.
    Metoda ta otrzyma bądź wygeneruje wiadomość (wiadomość będzie albo zadana przy wywołaniu funkcji, albo podana będzie ilość znaków i zostanie wygenerowana
    losowa wiadomość z losowych znaków), a następnie wygenerowaną wiadomość potnie i przekaże do Anny. 
    1.2. Podawanie wiadomośći z Jana do Anny może wyglądać tak: Jan generuje wiadomość, Jan ją tnie i miesza, kawałki tej wiadomości zapisuje do pliku txt w formie 
    każdego pakietu w innej linijce. Anna następnie czyta po jedym pakiecie (linijce), tworzy z niego nowy wskaźnik na (String albo Cstring), wskaźnik
    na nowy element wkłada do kolejki, po włożeniu wszystkich elementów do kolejki pryjorytetowej elementy wyjmowane są 1 po 1.
    Ad 1.2. Ewentualnie, i chyba będzie to lepsze rozwiązanie, zamiast pisać do pliku txt
    (gdzie w jednej linijce musiała by sie znaleźć treść pakietu i jej pryjorytet):
        1. Jan w taki czy inny sposób dostaje bądź generuje tekst do wysłania Annie
        2. String o długości L jest cięty na n kawałków, każdy o długości maximum L/n (ostatni kawałek może mieć inna długość niż L/n).
        3. Tworzymy zwykła tablice na wskaźniki na Strukturę* o długości odpowiadającej ilości pakietów. Każde miejsce w tablicy będzie zainicjalizowane taką
        wartością, aby ta wartość była inna od każdego możliwego w tym zadaniu wskaźnika (jakiś null czy coś).
        4. dla każdego kawałka tworzymy nowy wskaźnik na Strukturę (albo jakiś odpowiednik) zawierający ten że pakiet. Ten wskaźnik przekazujemy
        do tablicy na losowe i niezajęte miejsce. Nie musimy dosłownie ciąć i wkładać tej wiadomości we wskaźniki czy do tablicy, wystarczy ze Obiekty
        Struktury, do kótrych stworzyliśmy wskaźniki będą posiadały kopie słowa/pakietu/ciągu znaków. Oryginalny string może być nie zmieniony w ogóle.
        5. Tak wygenerowana tablica, bądź wskaźnik do niej, zostaje przekazana do Anny (inna instancja tej samej klasy "Osoba"). W sumie to logiczniej
        przekazać całą tablice, gdyż bardziej odpowiada to symulowanej tutaj sytuacji).
        6. Anna, gdy już dostanie całą tablice/wskaźnik do niej, wkłada po jednym pakiecie (instancji Struktury czy tam wskaźnik na nią)
        z tej listy do kolejki pryjorytetowej.
        7. Odpowiednio zaimplementwana kolejka pryjorytetowa (max heap) automatycznie posortuje nam te elementy.
        8. Jakaś metoda Anny wyjmuje ze szczytu kolejki wyrazy o najwyższym pryjorytecie (są to nadal wskaźniki na string)
        9. Adresy tych stringów są z osobna dereferowane i dodawane do stringu będącego gotową i posortowaną wiadomością.
    Ad 1.3. Lekka modyfikacja: aby nieco bardziej upodobnić kod do sytuacji rzeczywistej (przesyłanie wiadomośćci przez pakiety), lepiej by było, gdyby Jan
        nie tworzył tablicy ze wskaźnikami na Pakiety, ale po prostu tablice pakietów - w tym wypadku ania dostawała by kopie/referencje/wskaźnik tablicy
        (zalezy jak to zaimplementuje), zamiast tablicy ze wskaźnikami na pakiety, które siedziały by sobie w stałych miejscach w pamięci - jest to nieco bardziej
        realistyczne biorąc kontekst zadania.
        Natomiast, gdy Ania dostanie już kopie/referencje/itd tablicy, będzie robiła z Pakietów wskaźniki na pakiety, żeby MinHeap nie musiał żąglować całymi
        stukturami, a tylko wskaźnikami na nie. Oczywiśćie, Heap bedzie musaił dereferować te wskaźniki zeby porównać pryjorytety, ale i tak gitara.


Jak zrobić klase Person, co ona ma robić
    - Generować pociętą na pakiety wiadomość na podstawie zadanej w argumencie wiadomości (string)
    - Generować pociętą na pakiety wiadomość na podstawie liczby znaków, jaką ta wiadomość ma zawierać. Wiadomością jest w tym przypadku losowy ciąg znaków
    W ubu przypadkach rozmiar pakietu byłby stały, powiedzmy 5 znaków na pakiet (łącznie ze spacjami itd.)
    - Pobierać pociętą wiadomość. W tym przypadku metoda odpowiedzialna za odbieranie wiadomości przyjmowała by zmienną będącą tablicą Packet'ow, nie tablicą wskaźników.
    - Wysyłanie uprzednio wygenerowanej wiadomości do zadanego obiektu klas Person.

Problemy:
    you cant pass to a function an array by value, it needs to be a pointer or a reference, meaning that if you are not careful, the original array outside of the function may get
    modified. So, just use const and/or make a copy of that passed array inside your runction



Decyzje, z kótrych będe musiał się tłumaczyć:
1. dlaczego klasa Packet przechowuje treść zamiast wskaźnik do niej (generic content zamiast generic* content)
    Większy realizm, w końcu mamy przekzać wiadomość. Mało realistyczne jakbyśmy przekazywali przez neta tylko wskaźniki, które wskazują na wartośći na innym
    kompie.

2. Dlaczego heap jest na array a nie na liście jedno/dwu kierunkowej - bo mi sie nie chciało.

3. Dlaczego klasy są zdefiniowane w headerach (bo template)

4. Dlaczego wiadomość do wysłania jest atrybutem obiektu - dlatego, ze nie da sie zwyklej tablicy poskładać
do funkcji przez kopie, a można tyklo przez referencje/wskaźnik. Jezeli da sie tylko przez wskaźnik, to znaczy,
że ta oruginalna tablica musi gdzies istnieć, a jeżeli tak pomieszana tablica istnieje tylko wewnątrz funkcji
to po zakończeniu ten funkcji tablica przestaje istnieć. Ponaddto chcę, żeby nadawca posiadał jakąś kopie wiadomośći.